diff -Nupr src.orig/kernel/audit.c src/kernel/audit.c
--- src.orig/kernel/audit.c	2021-09-10 14:03:43.551000772 -0400
+++ src/kernel/audit.c	2021-09-10 14:04:12.795132663 -0400
@@ -314,6 +314,12 @@ void audit_panic(const char *message)
 	}
 }
 
+void kpatch_audit_foo(void)
+{
+	if (!jiffies)
+		printk("kpatch audit foo\n");
+}
+
 static inline int audit_rate_check(void)
 {
 	static unsigned long	last_check = 0;
@@ -324,6 +330,7 @@ static inline int audit_rate_check(void)
 	unsigned long		elapsed;
 	int			retval	   = 0;
 
+	kpatch_audit_foo();
 	if (!audit_rate_limit) return 1;
 
 	spin_lock_irqsave(&lock, flags);
@@ -343,6 +350,11 @@ static inline int audit_rate_check(void)
 	return retval;
 }
 
+noinline void kpatch_audit_check(void)
+{
+	audit_rate_check();
+}
+
 /**
  * audit_log_lost - conditionally log lost audit message event
  * @message: the message stating reason for lost audit message
@@ -389,6 +401,8 @@ static int audit_log_config_change(char
 	struct audit_buffer *ab;
 	int rc = 0;
 
+	kpatch_audit_check();
+
 	ab = audit_log_start(audit_context(), GFP_KERNEL, AUDIT_CONFIG_CHANGE);
 	if (unlikely(!ab))
 		return rc;
@@ -1095,6 +1109,7 @@ static int audit_get_feature(struct sk_b
 	return 0;
 }
 
+__attribute__((optimize("-fno-optimize-sibling-calls")))
 static void audit_log_feature_change(int which, u32 old_feature, u32 new_feature,
 				     u32 old_lock, u32 new_lock, int res)
 {
@@ -2230,6 +2245,7 @@ EXPORT_SYMBOL(audit_log_task_info);
  * @type: audit message type (AUDIT_ANOM_LINK, AUDIT_ANOM_CREAT, etc)
  * @operation: specific operation name
  */
+__attribute__((optimize("-fno-optimize-sibling-calls")))
 void audit_log_path_denied(int type, const char *operation)
 {
 	struct audit_buffer *ab;
@@ -2368,6 +2384,7 @@ int audit_signal_info(int sig, struct ta
  * queue and a kthread is scheduled to remove them from the queue outside the
  * irq context.  May be called in any context.
  */
+__attribute__((optimize("-fno-optimize-sibling-calls")))
 void audit_log_end(struct audit_buffer *ab)
 {
 	struct sk_buff *skb;
