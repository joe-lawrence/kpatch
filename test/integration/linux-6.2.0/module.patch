From 4ad0397efd708a961ecf733bc649783565a6f2db Mon Sep 17 00:00:00 2001
From: Joe Lawrence <joe.lawrence@redhat.com>
Date: Thu, 19 Jan 2023 16:43:46 -0500
Subject: [PATCH] kpatch module integration test
Content-type: text/plain

This tests several things related to the patching of modules:

- 'kpatch_string' tests the referencing of a symbol which is outside the
  .o, but inside the patch module.

- alternatives patching (.altinstructions)

- paravirt patching (.parainstructions)

- jump labels (5.8+ kernels only) -- including dynamic printk

Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
---
 fs/nfsd/export.c         | 31 +++++++++++++++++++++++++++++++
 net/netlink/af_netlink.c |  5 +++++
 2 files changed, 36 insertions(+)

diff --git a/fs/nfsd/export.c b/fs/nfsd/export.c
index 668c7527b17e..a3122ee61466 100644
--- a/fs/nfsd/export.c
+++ b/fs/nfsd/export.c
@@ -1294,6 +1294,27 @@ static void exp_flags(struct seq_file *m, int flag, int fsid,
 	}
 }
 
+#include "kpatch-macros.h"
+static int pre_patch_callback(patch_object *obj)
+{
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 8, 0)
+	static DEFINE_STATIC_KEY_TRUE(kpatch_key);
+
+	if (static_branch_unlikely(&memcg_kmem_enabled_key))
+		printk("kpatch: memcg_kmem_enabled_key\n");
+
+	BUG_ON(!static_branch_likely(&kpatch_key));
+	static_branch_disable(&kpatch_key);
+	BUG_ON(static_branch_likely(&kpatch_key));
+	static_branch_enable(&kpatch_key);
+#endif
+       return 0;
+}
+KPATCH_PRE_PATCH_CALLBACK(pre_patch_callback);
+
+extern char *kpatch_string(void);
+
+__attribute__((optimize("-fno-optimize-sibling-calls")))
 static int e_show(struct seq_file *m, void *p)
 {
 	struct cache_head *cp = p;
@@ -1301,12 +1322,22 @@ static int e_show(struct seq_file *m, void *p)
 	struct cache_detail *cd = m->private;
 	bool export_stats = is_export_stats_file(m);
 
+#ifdef CONFIG_X86_64
+	alternative("ud2", "call single_task_running", X86_FEATURE_ALWAYS);
+	alternative("call single_task_running", "ud2", X86_FEATURE_IA64);
+
+	slow_down_io();   /* paravirt call */
+#endif
+
+	pr_debug("kpatch: pr_debug() test\n");
+
 	if (p == SEQ_START_TOKEN) {
 		seq_puts(m, "# Version 1.1\n");
 		if (export_stats)
 			seq_puts(m, "# Path Client Start-time\n#\tStats\n");
 		else
 			seq_puts(m, "# Path Client(Flags) # IPs\n");
+		seq_puts(m, kpatch_string());
 		return 0;
 	}
 
diff --git a/net/netlink/af_netlink.c b/net/netlink/af_netlink.c
index bca2a470ccad..53ede086f39e 100644
--- a/net/netlink/af_netlink.c
+++ b/net/netlink/af_netlink.c
@@ -2970,4 +2970,9 @@ static int __init netlink_proto_init(void)
 	panic("netlink_init: Cannot allocate nl_table\n");
 }
 
+char *kpatch_string(void)
+{
+	return "# kpatch\n";
+}
+
 core_initcall(netlink_proto_init);
-- 
2.39.0

